// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package data

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.applyFlatDiscountStmt, err = db.PrepareContext(ctx, applyFlatDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query ApplyFlatDiscount: %w", err)
	}
	if q.applyPercentageDiscountStmt, err = db.PrepareContext(ctx, applyPercentageDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query ApplyPercentageDiscount: %w", err)
	}
	if q.checkCartIsEmptyStmt, err = db.PrepareContext(ctx, checkCartIsEmpty); err != nil {
		return nil, fmt.Errorf("error preparing query CheckCartIsEmpty: %w", err)
	}
	if q.checkItemInCartStmt, err = db.PrepareContext(ctx, checkItemInCart); err != nil {
		return nil, fmt.Errorf("error preparing query CheckItemInCart: %w", err)
	}
	if q.clearCartItemsStmt, err = db.PrepareContext(ctx, clearCartItems); err != nil {
		return nil, fmt.Errorf("error preparing query ClearCartItems: %w", err)
	}
	if q.completeCheckoutStmt, err = db.PrepareContext(ctx, completeCheckout); err != nil {
		return nil, fmt.Errorf("error preparing query CompleteCheckout: %w", err)
	}
	if q.deleteCartItemStmt, err = db.PrepareContext(ctx, deleteCartItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCartItem: %w", err)
	}
	if q.fetchProductByIDStmt, err = db.PrepareContext(ctx, fetchProductByID); err != nil {
		return nil, fmt.Errorf("error preparing query FetchProductByID: %w", err)
	}
	if q.getCartItemsStmt, err = db.PrepareContext(ctx, getCartItems); err != nil {
		return nil, fmt.Errorf("error preparing query GetCartItems: %w", err)
	}
	if q.getItemByIDStmt, err = db.PrepareContext(ctx, getItemByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemByID: %w", err)
	}
	if q.getUniqueItemCountInCartStmt, err = db.PrepareContext(ctx, getUniqueItemCountInCart); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniqueItemCountInCart: %w", err)
	}
	if q.insertCartItemStmt, err = db.PrepareContext(ctx, insertCartItem); err != nil {
		return nil, fmt.Errorf("error preparing query InsertCartItem: %w", err)
	}
	if q.insertProductStmt, err = db.PrepareContext(ctx, insertProduct); err != nil {
		return nil, fmt.Errorf("error preparing query InsertProduct: %w", err)
	}
	if q.modifyItemQuantityStmt, err = db.PrepareContext(ctx, modifyItemQuantity); err != nil {
		return nil, fmt.Errorf("error preparing query ModifyItemQuantity: %w", err)
	}
	if q.updateProductStockLevelStmt, err = db.PrepareContext(ctx, updateProductStockLevel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProductStockLevel: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.applyFlatDiscountStmt != nil {
		if cerr := q.applyFlatDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing applyFlatDiscountStmt: %w", cerr)
		}
	}
	if q.applyPercentageDiscountStmt != nil {
		if cerr := q.applyPercentageDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing applyPercentageDiscountStmt: %w", cerr)
		}
	}
	if q.checkCartIsEmptyStmt != nil {
		if cerr := q.checkCartIsEmptyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkCartIsEmptyStmt: %w", cerr)
		}
	}
	if q.checkItemInCartStmt != nil {
		if cerr := q.checkItemInCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkItemInCartStmt: %w", cerr)
		}
	}
	if q.clearCartItemsStmt != nil {
		if cerr := q.clearCartItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing clearCartItemsStmt: %w", cerr)
		}
	}
	if q.completeCheckoutStmt != nil {
		if cerr := q.completeCheckoutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing completeCheckoutStmt: %w", cerr)
		}
	}
	if q.deleteCartItemStmt != nil {
		if cerr := q.deleteCartItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCartItemStmt: %w", cerr)
		}
	}
	if q.fetchProductByIDStmt != nil {
		if cerr := q.fetchProductByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing fetchProductByIDStmt: %w", cerr)
		}
	}
	if q.getCartItemsStmt != nil {
		if cerr := q.getCartItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCartItemsStmt: %w", cerr)
		}
	}
	if q.getItemByIDStmt != nil {
		if cerr := q.getItemByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemByIDStmt: %w", cerr)
		}
	}
	if q.getUniqueItemCountInCartStmt != nil {
		if cerr := q.getUniqueItemCountInCartStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniqueItemCountInCartStmt: %w", cerr)
		}
	}
	if q.insertCartItemStmt != nil {
		if cerr := q.insertCartItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertCartItemStmt: %w", cerr)
		}
	}
	if q.insertProductStmt != nil {
		if cerr := q.insertProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertProductStmt: %w", cerr)
		}
	}
	if q.modifyItemQuantityStmt != nil {
		if cerr := q.modifyItemQuantityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing modifyItemQuantityStmt: %w", cerr)
		}
	}
	if q.updateProductStockLevelStmt != nil {
		if cerr := q.updateProductStockLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStockLevelStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	applyFlatDiscountStmt        *sql.Stmt
	applyPercentageDiscountStmt  *sql.Stmt
	checkCartIsEmptyStmt         *sql.Stmt
	checkItemInCartStmt          *sql.Stmt
	clearCartItemsStmt           *sql.Stmt
	completeCheckoutStmt         *sql.Stmt
	deleteCartItemStmt           *sql.Stmt
	fetchProductByIDStmt         *sql.Stmt
	getCartItemsStmt             *sql.Stmt
	getItemByIDStmt              *sql.Stmt
	getUniqueItemCountInCartStmt *sql.Stmt
	insertCartItemStmt           *sql.Stmt
	insertProductStmt            *sql.Stmt
	modifyItemQuantityStmt       *sql.Stmt
	updateProductStockLevelStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		applyFlatDiscountStmt:        q.applyFlatDiscountStmt,
		applyPercentageDiscountStmt:  q.applyPercentageDiscountStmt,
		checkCartIsEmptyStmt:         q.checkCartIsEmptyStmt,
		checkItemInCartStmt:          q.checkItemInCartStmt,
		clearCartItemsStmt:           q.clearCartItemsStmt,
		completeCheckoutStmt:         q.completeCheckoutStmt,
		deleteCartItemStmt:           q.deleteCartItemStmt,
		fetchProductByIDStmt:         q.fetchProductByIDStmt,
		getCartItemsStmt:             q.getCartItemsStmt,
		getItemByIDStmt:              q.getItemByIDStmt,
		getUniqueItemCountInCartStmt: q.getUniqueItemCountInCartStmt,
		insertCartItemStmt:           q.insertCartItemStmt,
		insertProductStmt:            q.insertProductStmt,
		modifyItemQuantityStmt:       q.modifyItemQuantityStmt,
		updateProductStockLevelStmt:  q.updateProductStockLevelStmt,
	}
}
