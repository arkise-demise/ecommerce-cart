// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sqlcquery.sql

package data

import (
	"context"
)

const applyFlatDiscount = `-- name: ApplyFlatDiscount :exec
UPDATE items
SET price = GREATEST(price - $1, 0)
WHERE item_id = $2
`

type ApplyFlatDiscountParams struct {
	Price  float64 `json:"price"`
	ItemID int32   `json:"item_id"`
}

func (q *Queries) ApplyFlatDiscount(ctx context.Context, arg ApplyFlatDiscountParams) error {
	_, err := q.exec(ctx, q.applyFlatDiscountStmt, applyFlatDiscount, arg.Price, arg.ItemID)
	return err
}

const applyPercentageDiscount = `-- name: ApplyPercentageDiscount :exec
UPDATE items
SET price = GREATEST(price - (price * $1 / 100), 0)  
WHERE item_id = $2
`

type ApplyPercentageDiscountParams struct {
	Price  float64 `json:"price"`
	ItemID int32   `json:"item_id"`
}

func (q *Queries) ApplyPercentageDiscount(ctx context.Context, arg ApplyPercentageDiscountParams) error {
	_, err := q.exec(ctx, q.applyPercentageDiscountStmt, applyPercentageDiscount, arg.Price, arg.ItemID)
	return err
}

const checkCartIsEmpty = `-- name: CheckCartIsEmpty :one
SELECT COUNT(*) FROM items
`

func (q *Queries) CheckCartIsEmpty(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.checkCartIsEmptyStmt, checkCartIsEmpty)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkItemInCart = `-- name: CheckItemInCart :one
SELECT EXISTS (
    SELECT 1
    FROM items
    WHERE item_id = $1
) AS item_exists
`

func (q *Queries) CheckItemInCart(ctx context.Context, itemID int32) (bool, error) {
	row := q.queryRow(ctx, q.checkItemInCartStmt, checkItemInCart, itemID)
	var item_exists bool
	err := row.Scan(&item_exists)
	return item_exists, err
}

const clearCartItems = `-- name: ClearCartItems :exec
DELETE FROM items
`

func (q *Queries) ClearCartItems(ctx context.Context) error {
	_, err := q.exec(ctx, q.clearCartItemsStmt, clearCartItems)
	return err
}

const completeCheckout = `-- name: CompleteCheckout :exec
DELETE FROM items
`

func (q *Queries) CompleteCheckout(ctx context.Context) error {
	_, err := q.exec(ctx, q.completeCheckoutStmt, completeCheckout)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM items WHERE item_id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, itemID int32) error {
	_, err := q.exec(ctx, q.deleteCartItemStmt, deleteCartItem, itemID)
	return err
}

const fetchProductByID = `-- name: FetchProductByID :one
SELECT product_id, product_name, price, stock
FROM products
WHERE product_id = $1
`

func (q *Queries) FetchProductByID(ctx context.Context, productID int32) (Products, error) {
	row := q.queryRow(ctx, q.fetchProductByIDStmt, fetchProductByID, productID)
	var i Products
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT item_id, item_name, price, quantity
FROM items
`

func (q *Queries) GetCartItems(ctx context.Context) ([]Items, error) {
	rows, err := q.query(ctx, q.getCartItemsStmt, getCartItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Items
	for rows.Next() {
		var i Items
		if err := rows.Scan(
			&i.ItemID,
			&i.ItemName,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemByID = `-- name: GetItemByID :one
SELECT item_id, item_name, price, quantity
FROM items
WHERE item_id = $1
`

func (q *Queries) GetItemByID(ctx context.Context, itemID int32) (Items, error) {
	row := q.queryRow(ctx, q.getItemByIDStmt, getItemByID, itemID)
	var i Items
	err := row.Scan(
		&i.ItemID,
		&i.ItemName,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getUniqueItemCountInCart = `-- name: GetUniqueItemCountInCart :one
SELECT COUNT(DISTINCT item_id) AS total_unique_items
FROM items
`

func (q *Queries) GetUniqueItemCountInCart(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getUniqueItemCountInCartStmt, getUniqueItemCountInCart)
	var total_unique_items int64
	err := row.Scan(&total_unique_items)
	return total_unique_items, err
}

const insertCartItem = `-- name: InsertCartItem :exec
INSERT INTO items (item_id, item_name, price, quantity) 
VALUES ($1, $2, $3, $4)
`

type InsertCartItemParams struct {
	ItemID   int32   `json:"item_id"`
	ItemName string  `json:"item_name"`
	Price    float64 `json:"price"`
	Quantity int32   `json:"quantity"`
}

func (q *Queries) InsertCartItem(ctx context.Context, arg InsertCartItemParams) error {
	_, err := q.exec(ctx, q.insertCartItemStmt, insertCartItem,
		arg.ItemID,
		arg.ItemName,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const insertProduct = `-- name: InsertProduct :exec
INSERT INTO products (product_id, product_name, price, stock)
VALUES ($1, $2, $3, $4)
`

type InsertProductParams struct {
	ProductID   int32   `json:"product_id"`
	ProductName string  `json:"product_name"`
	Price       float64 `json:"price"`
	Stock       int32   `json:"stock"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) error {
	_, err := q.exec(ctx, q.insertProductStmt, insertProduct,
		arg.ProductID,
		arg.ProductName,
		arg.Price,
		arg.Stock,
	)
	return err
}

const modifyItemQuantity = `-- name: ModifyItemQuantity :exec
UPDATE items
SET quantity = $2
WHERE item_id = $1
`

type ModifyItemQuantityParams struct {
	ItemID   int32 `json:"item_id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) ModifyItemQuantity(ctx context.Context, arg ModifyItemQuantityParams) error {
	_, err := q.exec(ctx, q.modifyItemQuantityStmt, modifyItemQuantity, arg.ItemID, arg.Quantity)
	return err
}

const updateProductStockLevel = `-- name: UpdateProductStockLevel :exec
UPDATE products
SET stock = $2
WHERE product_id = $1
`

type UpdateProductStockLevelParams struct {
	ProductID int32 `json:"product_id"`
	Stock     int32 `json:"stock"`
}

func (q *Queries) UpdateProductStockLevel(ctx context.Context, arg UpdateProductStockLevelParams) error {
	_, err := q.exec(ctx, q.updateProductStockLevelStmt, updateProductStockLevel, arg.ProductID, arg.Stock)
	return err
}
